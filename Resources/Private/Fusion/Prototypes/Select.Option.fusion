prototype(Neos.Fusion.Form:Select.Option)  < prototype(Neos.Fusion:Component) {

    @propTypes {
        field = ${PropTypes.dataStructure()}
        attributes = ${PropTypes.dataStructure()}
        content = ${PropTypes.string}
    }

    #
    # the values are used to calculate the `option` value and selected state
    #
    field = Neos.Fusion:DataStructure {
        value = null
    }

    #
    # attributes for the field to be used by the renderer of derived types
    #
    attributes = Neos.Fusion:DataStructure

    #
    # afx content to be used by the renderer of derived types
    #
    content = ''

    renderer = Neos.Fusion:Component {

        #
        # pass down props
        #
        field = ${props.field}
        attributes = ${props.atttributes}
        content = ${props.content}

        #
        # the `selected` state is calculated outside the renderer to allow` overriding via `attributes`
        #
        selected = null
        selected.@process.checkMultiValue = ${Array.indexOf(Form.stringifyArray(field.value), Form.stringifyValue(props.field.value)) > -1}
        selected.@process.checkMultiValue.@if.hasValue = ${field.value}
        selected.@process.checkMultiValue.@if.isMultiple = ${field.multiple}
        selected.@process.checkSingleValue = ${Form.stringifyValue(props.field.value) == Form.stringifyValue(field.value)}
        selected.@process.checkSingleValue.@if.hasValue = ${field.value}
        selected.@process.checkSingleValue.@if.isSingle = ${!field.multiple}

        renderer = afx`
           <option
               value={Form.stringifyValue(props.field.value)}
               selected={props.selected}
               {...props.attributes}
           >
               {props.content || props.field.value}
           </option>
        `
    }
}
