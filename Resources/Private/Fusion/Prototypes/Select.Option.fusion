prototype(Neos.Fusion.Form:Select.Option)  < prototype(Neos.Fusion:Component) {

    #
    # ensure the `option`-context is evaluated first so it is available for calculating other `props`
    #
    @context.option = ${this.option}

    #
    # `option` is excluded from `props`, for beeing in line with `form` and `field`
    #
    @ignoreProperties = ${['option']}

    @propTypes {
        option = ${PropTypes.dataStructure({value: propTypes.any})}
        attributes = ${PropTypes.dataStructure()}
        content = ${PropTypes.string}
    }

    #
    # the values are used to calculate the `option` value and selected state
    #
    option = Neos.Fusion.Form:OptionDefinition

    #
    # attributes for the field to be used by the renderer of derived types
    #
    attributes = Neos.Fusion:DataStructure

    #
    # afx content to be used by the renderer of derived types
    #
    content = ''

    renderer = Neos.Fusion:Component {

        #
        # pass down props
        #
        attributes = ${props.attributes}
        content = ${props.content}

        #
        # the `selected` state is calculated outside the renderer to allow` overriding via `attributes`
        #
        selected = false
        selected.@process.checkMultiValue = ${Array.indexOf(field.getCurrentValue(true), option.getTargetvalue(true)) > -1}
        selected.@process.checkMultiValue.@if.hasValue = ${field.hasCurrentValue()}
        selected.@process.checkMultiValue.@if.isMultiple = ${field.isMultiple()}
        selected.@process.checkSingleValue = ${field.getCurrentValue(true) == option.getTargetvalue(true)}
        selected.@process.checkSingleValue.@if.hasValue = ${field.hasCurrentValue()}
        selected.@process.checkSingleValue.@if.isSingle = ${!field.isMultiple()}

        renderer = afx`
           <option
               value={option.getTargetValue(true)}
               selected={props.selected}
               {...props.attributes}
           >
               {props.content || option.getTargetValue()}
           </option>
        `
    }
}
