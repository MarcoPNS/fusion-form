prototype(Neos.Fusion.Form:FieldComponent) < prototype(Neos.Fusion:Component) {

    @ignoreProperties = ${['field']}
    @context.field = ${(this.field.name || !field) ? Form.createField(form, this.field.name, this.field.multiple) : field}
    @propTypes {
        field = ${PropTypes.dataStructure({form: PropTypes.instanceof('\\Neos\\Fusion\\Form\\Domain\\Model\\Form') , name: PropTypes.string, multiple: PropTypes.boolean})}
        attributes = ${PropTypes.dataStructure()}
        content = ${PropTypes.string}
    }

    #
    # the values are used to populate the `field` context but are not available as `props` if no
    # fieldname is given an existing `field` from outside is used
    #
    field = Neos.Fusion:DataStructure {
        form = ${form}
        name = null
        multiple = false
    }

    #
    # attributes for the field to be used by the renderer of derived types
    #
    attributes = Neos.Fusion:DataStructure

    #
    # afx content to be used by the renderer of derived types
    #
    content = ''
}
